>>> MyList = __import__('1-my_list').MyList
>>> print_sorted = __import__('1-my_list').MyList.print_sorted


>>> print_sorted([5, 4, 3, 2, 1, 0])
[0, 1, 2, 3, 4, 5]

>>> print_sorted([0, 0, 0, 0,])
[0, 0, 0, 0]

>>> print_sorted([3, 1, 5, 2, 4])
[1, 2, 3, 4, 5]

>>> print_sorted([])
[]

>>> print_sorted()
Traceback (most recent call last):
TypeError: print_sorted() missing 1 required positional argument: 'self'

>>> print_sorted([3])
[3]

>>> print_sorted([-5, -4, -2, -3, 0, -1])
[-5, -4, -3, -2, -1, 0]

>>> print_sorted([int("inf")])
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'inf'

>>> print_sorted([float('NaN')])
[nan]

>>> print_sorted([float('Inf')])
[inf]

>>> a_list = MyList()
>>> a_list.append(1)
>>> a_list.append(4)
>>> a_list.append(2)
>>> a_list.append(3)
>>> a_list.append(5)
>>> a_list.append(0)
>>> a_list.print_sorted()
[0, 1, 2, 3, 4, 5]

>>> a_list = MyList()
>>> a_list.append(-1)
>>> a_list.append(-4)
>>> a_list.append(-2)
>>> a_list.append(-3)
>>> a_list.append(-5)
>>> a_list.append(0)
>>> print(a_list)
[-1, -4, -2, -3, -5, 0]

>>> a_list.print_sorted()
[-5, -4, -3, -2, -1, 0]

>>> a_list = MyList()
>>> a_list.print_sorted()
[]

>>> a_list.append(98)
>>> a_list.print_sorted()
[98]

>>> a_list.append(128)
>>> a_list.print_sorted()
[98, 128]

>>> a_list.append(256)
>>> a_list.print_sorted()
[98, 128, 256]

>>> a_list.append(1028)
>>> a_list.print_sorted()
[98, 128, 256, 1028]

>>> my_list = MyList()
>>> my_list.append("Holberton")
>>> my_list.append(5.7)
>>> my_list.append(5, 6.9, 4.20, "Blaze it")
Traceback (most recent call last):
TypeError: append() takes exactly one argument (4 given)

>>> my_list.append()
Traceback (most recent call last):
TypeError: append() takes exactly one argument (0 given)

>>> my_list()
Traceback (most recent call last):
TypeError: 'MyList' object is not callable

>>> MyList()
[]

>>> MyList(5)
Traceback (most recent call last):
TypeError: 'int' object is not iterable

>>> MyList("Holberton")
['H', 'o', 'l', 'b', 'e', 'r', 't', 'o', 'n']

>>> MyList(5, 4, 3, 2)
Traceback (most recent call last):
TypeError: list() takes at most 1 argument (4 given)

>>> type(MyList())
<class '1-my_list.MyList'>

>>> isinstance(MyList, list)
False

>>> issubclass(MyList, list)
True